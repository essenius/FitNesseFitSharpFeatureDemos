If fixture methods return class instances, we can assign those to symbols.
With that, we can do nifty things like making fixtures from those instances and calling methods on them. 

|scenario|check property|property1|.|property2||value|
|push fixture                                        |
|start   |@property1                                 |
|check   |@property2    |@value                      |
|pop fixture                                         |

!|script       |Main Fixture                    |
|check property|Sub fixture|.|sub property||demo|

!-MainFixture-!.cs
{{{namespace TestSlim
{
    public class MainFixture
    {
        // constructor must be public for FitSharp to be able to find and instantiate the class
        public MainFixture() => SubFixture = new SubFixture();
        internal SubFixture SubFixture { get; }
    }

    public class SubFixture
    {
        // constructor can be internal as FitSharp doesn't instantiate it directly
        internal SubFixture() => SubProperty = "demo";
        internal string SubProperty { get; }
    }
}
}}}