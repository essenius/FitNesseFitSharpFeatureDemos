Arrays can be a bit tricky. If a space is used after the comma, we move to a new cell. If not, we stay in the same cell.

!|Script            |Array Test                                     |
|Set Array          |[1, 2, 3]                                      |
|check              |Array Field          |0   |1                   |
|Set Array          |[1,2,3]                                        |
|check              |Array                |=~/\[\d,2,\d\]/          |
|check              |Array Field          |0   |1,2,3               |
|Set Array Of Arrays|[[1, 2], [a, b], [one, two, three], [1,2,3]]   |
|check              |Array Of Arrays Field|0   |     |0    |1       |
|check              |Array Of Arrays Field|1   |     |1    |b       |
|check              |Array Of Arrays Field|2   |     |2    |three   |
|check              |Array Of Arrays Field|3   |     |0    |1,2,3   |
|check              |Array Of Arrays      |=~/\[.*, \[one.*\], .*\]/|
|Set Array          |[xpath://table, a, b]                          |
|check              |Array Field          |0   |xpath://table       |

We simulate the use of the fixture by value (i.e. not keeping changes after returning) via push fixture and pop fixture.
We also provide a reference to the changed instance with the $call symbol.

!|scenario|use by value|input|
|push fixture                |
|start    |Array Test        |
|Set Array|@input            |
|Show     |Array             |
|$call=   |get fixture       |
|pop fixture                 |

We set the array of a new fixture object, call the scenario, and show that the original value is still there after returning.
Then, we revive the changed instance and show its value.

!|script     |Array Test|
|show        |Array     |
|set array   |[q, r]    |
|use by value|[a, b]    |
|show        |Array     |
|start       |$call     |
|show        |Array     |

!-ArrayTest.cs-!
{{{using System.Collections.ObjectModel;

namespace TestSlim
{
    public class ArrayTest
    {
        public Collection<Collection<string>> ArrayOfArrays { get; set; }
        public Collection<string> Array { get; set; }
        public string ArrayField(int index) => Array[index];
        public string ArrayOfArraysField(int index1, int index2) => ArrayOfArrays[index1][index2];
    }
}
}}}

}}}
