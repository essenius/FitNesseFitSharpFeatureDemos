---
Suites: variables, symbols
---
!define CF_Equality {-40} 

!|script|TemperatureFixture                          |
|check  |convert|68 F            |to|C|20            |
|check  |convert|${CF_Equality} C|to|F|${CF_Equality}|

!define KF_Equality {574.5875}
!define TemperatureC {20}
!define TemperatureF {${=${TemperatureC} * 9/5 + 32=}}

!|script|TemperatureFixture                            |
|check  |convert|${TemperatureF} F|to|C|${TemperatureC}|

!define TemperatureC {25}

!|script                                             |
|check|convert|${TemperatureF} F|to|C|${TemperatureC}|

!|script                                           |
|check|convert|68 F            |to|C|20            |
|check|convert|${CF_Equality} C|to|F|${CF_Equality}|
|check|convert|${KF_Equality}K |to|F|${KF_Equality}|

!|script  |temperature|212F|
|$boiling=|get fixture     |

!|script|Temperature Fixture      |
|check  |convert|$boiling|to|C|100|
#|check|convert|0C|to|Fahrenheit|32|
#|check|convert|4 k|to|celsius|-269.15|

!-TemperatureFixture-!.cs
{{{namespace TestSlim
{
    public class TemperatureFixture
    {
        private double ConvertTo(Temperature input, string targetScale) => input.ValueIn(targetScale);
    }
}
}}}
Temperature.cs
{{{using System;
using System.Globalization;

namespace TestSlim
{
    public class Temperature
    {
        private const double AbsoluteZeroInCelsius = -273.15;
        private const double AbsoluteZeroInFahrenheit = -459.67;
        private const int PrecisionInDigits = 10;

        internal static Temperature Parse(string input) => new Temperature(input);

        public Temperature(string input)
        {
            var scale = input?.Substring(input.Length - 1).ToUpperInvariant();
            var temperature = Convert.ToDouble(input?.Substring(0, input.Length - 1).Trim(), CultureInfo.InvariantCulture);
            switch (scale)
            {
                case "F":
                    Value = Math.Round((temperature - AbsoluteZeroInFahrenheit) * 5 / 9, PrecisionInDigits);
                    break;
                case "C":
                    Value = temperature - AbsoluteZeroInCelsius;
                    break;
                case "K":
                    Value = temperature;
                    break;
                default:
                    throw new FormatException("Expected double ending with F, C or K.");
            }
        }

        internal double Value { get; }

        public override string ToString() => "Temperature: " + Value + "K";

        internal double ValueIn(string scale)
        {
            switch (scale?.Substring(0, 1).ToUpperInvariant())
            {
                case "F":
                    return Math.Round(Value * 9 / 5 + AbsoluteZeroInFahrenheit, PrecisionInDigits);
                case "C":
                    return Value + AbsoluteZeroInCelsius;
                case "K":
                    return Value;
                default:
                    throw new FormatException("Unrecognized temperature scale: " + scale);
            }
        }
    }
}

}}}