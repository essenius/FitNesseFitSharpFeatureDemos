---
Suites: variables, symbols
---
This test shows how you can use objects as symbol values. The Convert fixture function expects a Temperature object. So !-FitSharp-! will call the static Parse method on Temperature to try and parse the parameter value and return the new object as the input parameter. Then !-ConvertTo-! can call the !-ValueIn-! method of that object to convert the value. 

!define CF_Equality {-40} 
#!define KF_Equality {574.5875}

!|script|TemperatureFixture                          |
|check  |convert|68 F            |to|C|20            |
|check  |convert|${CF_Equality} C|to|F|${CF_Equality}|
#|check  |convert|${KF_Equality}K |to|F|${KF_Equality}|

!define TemperatureC {20}
!define TemperatureF {${=${TemperatureC} * 9/5 + 32=}}

!|script|TemperatureFixture                            |
|check  |convert|${TemperatureF} F|to|C|${TemperatureC}|

Redefine the variable containing temperature in centigrade and the Fahrenheit value will be re-evaluated as well 
!define TemperatureC {25}

!|script                                             |
|check|convert|${TemperatureF} F|to|C|${TemperatureC}|
Get a reference to a temperature object holding the temperature of boiling water, and use that as the parameter for the Convert To fixture function.

!|script  |temperature|212F|
|$boiling=|get fixture     |

!|script|Temperature Fixture      |
|check  |convert|$boiling|to|C|100|

!define TemperatureC {40}

|script|Echo Fixture|
|$TemperatureC=|echo|${TemperatureC} C|

|Script|Temperature Fixture|
|$TemperatureF=|Convert|$TemperatureC|to|F|
|Check|Convert|$TemperatureF F|to|C|${TemperatureC}|

!-TemperatureFixture-!.cs
{{{namespace TestSlim
{
    public class TemperatureFixture
    {
        private double ConvertTo(Temperature input, string targetScale) => input.ValueIn(targetScale);
    }
}
}}}
Temperature.cs
{{{using System;
using System.Globalization;

namespace TestSlim;

public class Temperature
{
    private const double AbsoluteZeroInCelsius = -273.15;
    private const double AbsoluteZeroInFahrenheit = -459.67;
    private const int PrecisionInDigits = 10;

    public Temperature(string input)
    {
        var scale = input?[^1..].ToUpperInvariant();
        var temperature = Convert.ToDouble(input?[..^1].Trim(), CultureInfo.InvariantCulture);
        Value = scale switch
        {
            "F" => Math.Round((temperature - AbsoluteZeroInFahrenheit) * 5 / 9, PrecisionInDigits),
            "C" => temperature - AbsoluteZeroInCelsius,
            "K" => temperature,
            _ => throw new FormatException("Expected a double, ending with F, C or K")
        };
    }

    public double Value { get; }
    public static Temperature Parse(string input) => new(input);
    public override string ToString() => $"Temperature: {Value} K";

    internal double ValueIn(string scale)
    {
        return scale?[..1].ToUpperInvariant() switch
        {
            "F" => Math.Round(Value * 9 / 5 + AbsoluteZeroInFahrenheit, PrecisionInDigits),
            "C" => Value + AbsoluteZeroInCelsius,
            "K" => Value,
            _ => throw new FormatException($"Unrecognized scale: {scale}")
        };
    }
}
}}}