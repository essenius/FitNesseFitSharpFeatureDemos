Create a decision fixture and get a reference to it

|script   |Decision Fixture|
|$fixture=|get fixture     |

Run the decision table test

|decision:$fixture                                                 |
|R |Angle|Decimals|x?     |y?      |Max Angle?|#Comment            |
|1 |0    |10      |1      |0       |          |horizontal right    |
|2 |180  |10      |-2     |0       |          |horizontal left     |
|4 |90   |10      |0      |4       |          |vertical up         |
|10|315  |5       |7.07107|-7.07107|          |45 degree down right|

This shows that you can access private fields from a fixture. That can be useful for debugging, but it is not recommended to use in tests.

|script|$fixture|
|show  |Log     |
|show  |Table   |

With baseline decision fixtures, you can omit values that stay the same.

|baseline:Decision Fixture         |
|Decimals|R |Angle|x?     |y?      |
|5       |1 |0    |1      |0       |
|        |2 |180  |-2     |        |
|        |4 |90   |0      |4       |
|        |10|315  |7.07107|-7.07107|

!-DecisionFixture.cs-!:
{{{using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Text;

namespace TestSlim;

public class DecisionFixture
{
    private readonly StringBuilder _log = new();
    private readonly StringBuilder _table = new();
    private double _radius;
    private double _yCoordinate;

    public double Angle { get; set; }
    public int Decimals { get; set; } = 5;
    public double MaxAngle { get; private set; }
    public double X { get; private set; }
    public void BeginTable() => _log.AppendLine("BeginTable");
    public void EndTable() => _log.AppendLine("EndTable");

    public void Execute()
    {
        _log.AppendLine(CultureInfo.InvariantCulture, $"Execute with R= {_radius} and Angle={Angle}");
        var radians = Angle / 180 * Math.PI;
        X = Math.Round(_radius * Math.Cos(radians), Decimals);
        _yCoordinate = Math.Round(_radius * Math.Sin(radians), Decimals);
    }

    public void Reset() => _log.AppendLine("Reset");
    public void SetR(double value) => _radius = value;

    public void Table(Collection<Collection<string>> inputTable)
    {
        _log.AppendLine("Table");
        foreach (var cell in inputTable[0])
        {
            _table.AppendLine(cell);
        }
        var index = inputTable[0].TakeWhile(header =>
            !header.Equals("Angle", StringComparison.OrdinalIgnoreCase)).Count();
        MaxAngle = inputTable.Skip(1).Select(row => Convert.ToDouble(row[index], CultureInfo.InvariantCulture))
            .Concat([0.0]).Max();
    }

    public double Y() => _yCoordinate;
}
}}}